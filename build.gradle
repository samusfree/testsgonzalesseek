plugins {
  id 'groovy'
  id 'idea'
  id 'org.springframework.boot' version "${springBootVersion}"
  id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
  id 'org.unbroken-dome.test-sets' version "${domeTestSetsVersion}"
  id 'application'
  id 'jacoco'
  id 'java'
  id "org.liquibase.gradle" version "${liquibaseGradleVersion}"
}

group = 'com.seek.testsgonzales'
version = "${appVersion}"

bootJar {
  archiveBaseName = 'test-sgonzales-service'
  archiveVersion = appVersion
  mainClass = 'com.seek.testsgonzales.TestSGonzalesApplication'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

application {
  mainClass = 'com.seek.testsgonzales.TestSGonzalesApplication'
}

repositories {
  mavenCentral()
}

testSets {
  integrationTest { dirName = 'integration-test' }
}

integrationTest() {
  useJUnitPlatform()
  forkEvery = 0
}

test {
  useJUnitPlatform()
}

def commonJacocoCoverageConfig = {
  executionData fileTree(layout.buildDirectory).include("jacoco/test.exec")
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, excludes: [
          'com/seek/testsgonzales/model/**',
          'com/seek/testsgonzales/enums/**',
          'com/seek/testsgonzales/api/**',
          'com/seek/testsgonzales/config/**',
          'com/seek/testsgonzales/exception/**',
          'com/seek/testsgonzales/entities/**',
          'com/seek/testsgonzales/repository/**',
          'com/seek/testsgonzales/constants/**',
          'com/seek/testsgonzales/TestSGonzalesApplication.class',
      ])
    }))
  }
}

jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
  reports {
    xml.required = true
  }
  configure commonJacocoCoverageConfig
}

jacocoIntegrationTestReport {
  dependsOn integrationTest // tests are required to run before generating the report
  reports {
    xml.required = true
  }
  configure commonJacocoCoverageConfig
}

jacoco {
  toolVersion = "0.8.12"
  reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
  jacocoTestCoverageVerification {
    violationRules {
      rule {
        limit {
          minimum = 0.90
        }
      }
    }
    configure commonJacocoCoverageConfig
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation "io.jsonwebtoken:jjwt:${jsonWebTokenVersion}"
  implementation "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
  implementation "io.swagger.core.v3:swagger-annotations:${swaggerAnnotationsVersion}"
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocOpenApiVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"
  implementation "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${mapstructLombokBindingVersion}"
  runtimeOnly 'com.mysql:mysql-connector-j'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation "org.spockframework:spock-core:${spockVersion}"
  testImplementation "org.spockframework:spock-spring:${spockVersion}"
  testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  testImplementation "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok-mapstruct-binding:${mapstructLombokBindingVersion}"
  testImplementation "org.testcontainers:spock:${testContainersVersion}"
  testImplementation "org.testcontainers:mysql:${testContainersVersion}"
  runtimeOnly 'org.springframework.boot:spring-boot-docker-compose'
}

check.dependsOn jacocoTestCoverageVerification
